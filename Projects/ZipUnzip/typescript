Script started on Tue Nov 12 00:07:48 2019
[?1034hbash-3.2$ cat -n zip.cpp
     1	#include <iostream>
     2	#include <fstream>
     3	#include <string>
     4	#include <cstdlib>
     5	#include <cctype>
     6	#include <vector>
     7	#include <cstdio>
     8	#include "huffman.h"
     9	
    10	using namespace std;
    11	
    12	string openFile(ifstream &infile, int argc, char *argv[]);
    13	void LetterFreq(ifstream &infile, int (&Letters)[256], string file, string &s);
    14	void InsertHuffman(const int Letters[], HuffmanTree &ht);
    15	void CreateZip(ifstream &infile, int argc, char* argv[], string file, HuffmanTree &ht, string s, int Letters[256]);
    16	
    17	int main(int argc, char* argv[]) {
    18	    ifstream infile;
    19	    HuffmanTree ht;
    20	    string s;
    21	    int header;
    22	    int Letters[256];
    23	    string fileToZip = openFile(infile, argc, argv);
    24	    LetterFreq(infile, Letters, fileToZip, s);
    25	    InsertHuffman(Letters, ht);
    26	    ht.build();
    27	    CreateZip(infile, argc, argv, fileToZip, ht, s, Letters);
    28	    return 0;
    29	}
    30	
    31	string openFile(ifstream &infile, int argc, char *argv[])
    32	{
    33	    string file;
    34	    if(argc >= 3)
    35	    {
    36	        file = argv[2];
    37	        return file;
    38	    }
    39	    else if(argc == 2)
    40	    {
    41	        file = argv[1];
    42	        return file;
    43	    }
    44	    else if (argc <= 1)
    45	    {
    46	        cout << "\tBad Filename Entered on Command Line -- Now Aborting." << endl;
    47	        exit(1);
    48	    }
    49	    else
    50	    {
    51	        exit(1);
    52	    }
    53	}
    54	
    55	
    56	void LetterFreq(ifstream &infile, int (&Letters)[256], string file, string &s)
    57	{
    58	    char ch;
    59	    infile.open(file);
    60	    for (char ch = 0; ch <= char(126); ch++)
    61	    {
    62	        Letters[ch] = 0;
    63	    }
    64	    while(infile.get(ch))
    65	    {
    66	        Letters[ch]++;
    67	        s += ch;
    68	    }
    69	
    70	}
    71	
    72	void InsertHuffman(const int Letters[], HuffmanTree &ht)
    73	{
    74	    for (char ch = char(0); ch <= char(126); ch++)
    75	    {
    76	        if (Letters[ch] != 0 && ch != '\n' && ch != ' ')
    77	        {
    78	            ht.insert(ch, Letters[ch]);
    79	        }
    80	        else if (Letters[ch] != 0 && ch == '\n')
    81	        {
    82	            ht.insert('@', Letters[ch]);
    83	        }
    84	        else if (Letters[ch] != 0 && ch == ' ')
    85	        {
    86	            ht.insert('_', Letters[ch]);
    87	        }
    88	    }
    89	}
    90	
    91	void CreateZip(ifstream &infile, int argc, char* argv[], string file, HuffmanTree &ht, string s, int Letters[256])
    92	{
    93	
    94	    int header = ht.numNodes() - ht.numNodes()/2;
    95	    file += ".zip";
    96	    ofstream zipFile;
    97	    string input = argv[1];
    98	    
    99	    if (input == "--t")
   100	    {
   101	        ht.PrintTable();
   102	        remove(argv[2]);
   103	    }
   104	    else if (input == "--help"){
   105	        string file = "help.txt";
   106	        infile.open(file.c_str());
   107	        string input;
   108	        while(infile)
   109	        {
   110	            cout << "here" << endl;
   111	            getline(infile, input);
   112	            cout << input << endl;
   113	        }
   114	        exit(1);
   115	    }
   116	    else {
   117	        remove(argv[1]);
   118	    }
   119	
   120	    zipFile.open(file.c_str());
   121	    zipFile << header << endl;
   122	    int source;
   123	    for (char ch = char(0); ch <= char(126); ch++)
   124	    {
   125	        if (Letters[ch] != 0 && ch != '\n' && ch != ' ')
   126	        {
   127	            zipFile << (int) ch << " " << ht.GetCode(ch) << endl;
   128	            source++;
   129	        }
   130	        else if (Letters[ch] != 0 && ch == '\n')
   131	        {
   132	            zipFile << (int) '\n' << " " << ht.GetCode('@') << endl;
   133	            source++;
   134	        }
   135	        else if (Letters[ch] != 0 && ch == ' ')
   136	        {
   137	            zipFile << (int) ' ' << " " << ht.GetCode('_') << endl;
   138	            source++;
   139	        }
   140	    }
   141	
   142	    char ch;
   143	    int numBits;
   144	    for (int i = 0; i < s.length(); i++)
   145	    {
   146	        ch = s[i];
   147	        zipFile << ht.GetCode(ch);
   148	        numBits++;
   149	    }
   150	    zipFile.close();
   151	    float ratio = (1 - (numBits) / (source * 8)) * 100;
   152	    cout << "File successfully Compressed To " << numBits << " Bits (" << ratio << "% less)" << endl;
   153	
   154	}
bash-3.2$ cath[K huffman.h
#include <vector>
#include <string>

using namespace std;

class HNode {
    public:
        char ch;
        int weight;
        int parent;
        int childType;
        bool operator< (const HNode &node) const;

};

class HuffmanTree {
    public:

	HuffmanTree();				// constructor

	void insert(char ch, int weight);	// inserts a character and its associated weight
						// into a node of the Huffman tree

	bool inTree(char ch);			// returns a boolean value indicating whether
						// a given character is stored in the tree

	int GetFrequency(char ch);		// returns the weight of a given character


	void build();				// Builds the Huffman Tree;


	string GetCode(char ch);		// returns the compressed code of a given
						// character in the tree using recursion

	void PrintTable();			// displays the Huffman encoding table used in
						// the compression process

	int numNodes();				// returns the number of nodes currently in Huffman
						// tree

    void print();

    int GetLowestFrequency(vector<int> &visited);

    bool isInVector(vector<int> &visited, int num);

    private:

	vector<HNode> nodes;
	int numChars;
	bool built;

	int lookUp(char ch);			// returns the index of a given character in tree
	int GetFrequency(int i);		// returns the weight at a given index
	string GetCode(int i);			// returns the compressed code of the character at
						            // a given index

};
bash-3.2$ cat hug[Kffman.cpp
#include "huffman.h"
#include <iostream>
#include <iomanip>

using namespace std;

HuffmanTree:: HuffmanTree()
	: numChars(0), built(false) {}


void HuffmanTree:: insert(char ch, int weight) {
    HNode newNode = {ch, weight, -1, -1};
    built = false;
    nodes.push_back(newNode);
    numChars++;
}

void HuffmanTree:: print() {
	for (int i = 0; i < nodes.size(); i++)
	{
		cout << nodes[i].ch << " " << nodes[i].weight << endl;
	}
}

bool HNode::operator < (const HNode& otherNode) const
{
	if (weight < otherNode.weight)
		return true;
	else
		return false;
}

bool HuffmanTree:: inTree(char ch) {
	for (int i = 0; i < nodes.size(); i++)
	{
		if (nodes[i].ch == ch)
			return true;
	}
	return false;
}

int HuffmanTree:: GetFrequency(char ch) {
	if(inTree(ch))
	{
		for (int i = 0; i < nodes.size(); i++)
			if (nodes[i].ch == ch)
				return nodes[i].weight;
	}
	cout << "This character is not in the tree" << endl;
	return 0;
}

int HuffmanTree:: GetFrequency(int i) {
	return nodes[i].weight;
}

bool HuffmanTree:: isInVector(vector<int> &visited, int num)
{
	if (find(visited.begin(), visited.end(), num) != visited.end())
	{
		return true;
	}
	else
		return false;
}

int HuffmanTree:: GetLowestFrequency(vector<int> &visited) {
	int low = 10000;
	int start = -1;
	for (int i = 0; i < nodes.size(); i++)
		if ((nodes[i].weight < low) && !(isInVector(visited, i)))
		{
			low = nodes[i].weight;
			start = i;
		}
	return start;
}

int HuffmanTree:: lookUp(char ch) {
	if(inTree(ch))
	{
		for (int i = 0; i < nodes.size(); i++)
			if (nodes[i].ch == ch)
				return i;
	}
	cout << "This character (" << ch << ") is not in the tree" << endl;
	return -1;
}

string HuffmanTree:: GetCode(char ch) {
	if (ch == ' ')
		return GetCode(lookUp('_'));
	else if (ch == '\n')
		return GetCode(lookUp('@'));
	else
		return GetCode(lookUp(ch));
}


string HuffmanTree:: GetCode(int i) {
	if (nodes[i].parent == -1)
		return "";
	else
		return (GetCode(nodes[i].parent) + (char) (nodes[i].childType + '0'));
}

void HuffmanTree:: PrintTable() {
	int combined = 1;
	cout << "\t~~~~~ ENCODING TABLE ~~~~~\n";
	cout << "Index \tChar \tWeight \tParent \tChildType" << endl;
	for (int i = 0; i < numChars; i++)
	{
		if(nodes[i].ch != ' ' && nodes[i].ch != '*')
		{
			cout << i << "\t" << nodes[i].ch << "\t" << nodes[i].weight << "\t" << nodes[i].parent << "\t" << nodes[i].childType << endl;
		}
		else if(nodes[i].ch == '*' && nodes[i].childType != -1)
		{
			cout << i << "\t" << 'T' << combined << "\t" << nodes[i].weight << "\t" << nodes[i].parent << "\t" << nodes[i].childType << endl;
			combined++;
		}
		else{
			cout << i << "\t" << 'T' << combined << "\t" << nodes[i].weight << "\t" << "0" << "\t" << -1 << endl;
		}
	}
}

int HuffmanTree:: numNodes() {
	int count = 0;
	for (int i = 0; i < nodes.size(); i++)
		count++;
	return count;
}


void HuffmanTree:: build() {
	// counter for combined characters
	vector<int> visited;

	//Step 2: Find 2 min weight and add their sum to MinHeap
	while (!built)
	{
		int lowestFreq = GetLowestFrequency(visited);
		visited.push_back(lowestFreq);
		int secondLowest = GetLowestFrequency(visited);
		visited.push_back(secondLowest);
		insert('*', nodes[lowestFreq].weight + nodes[secondLowest].weight);

		nodes[lowestFreq].childType = 0;
		nodes[secondLowest].childType = 1;

		nodes[lowestFreq].parent = nodes.size() - 1;
		nodes[secondLowest].parent = nodes.size() - 1;

		int counter = 0;
		for (int i = 0; i < nodes.size(); i++)
		{
			if (nodes[i].parent == -1)
			{
				counter++;
			}
		}
		if(counter == 1)
		{
			built = true;
		}
	}
}
bash-3.2$ c++ zip.cpp huffman.o
bash-3.2$ cat sample1
 aaaaaaaaaa   eeeeeeeeeeeeeee   iiiiiiiiiiii   ssss   ttt
bash-3.2$ ./myZip --t sample1
	~~~~~ ENCODING TABLE ~~~~~
Index 	Char 	Weight 	Parent 	ChildType
0	@	1	7	0
1	_	13	10	1
2	a	10	9	1
3	e	15	11	0
4	i	12	10	0
5	s	4	8	0
6	t	3	7	1
7	T1	4	8	1
8	T2	8	9	0
9	T3	18	11	1
10	T4	25	12	0
11	T5	33	12	1
12	T6	58	0	-1
File successfully Compressed To 792723514 Bits (-1.41558e+09% less)
bash-3.2$ ./myUnzip sample1.zip
File Successfully Inflated Back to Original.
bash-3.2$ exit
exit

Script done on Tue Nov 12 00:09:23 2019
